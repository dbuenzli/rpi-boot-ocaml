# -*-Makefile-*-

# OCaml sources for the kernel, add whathever you hack on in `src` to
# here, in the right compilation order.
ML := rpi.ml fb.ml logo.ml main.ml

# The build OS
BUILD_OS := $(shell uname -s)

# libc, either newlib's ligc and libc-newlib's syscall stubs or libc-ocaml
LIBC_USE_NEWLIB = false

# Where is libgcc.a, libm.a and libc.a (if LIBC_USE_NEWLIB is true)
ifeq ($(BUILD_OS),Darwin)
LGCC_PATH = /usr/local/lib/gcc/arm-none-eabi/4.9.3/armv7-ar/thumb/fpu
LC_PATH = /usr/local/Cellar/arm-none-eabi-gcc/4.9-2015-q2-update/arm-none-eabi/lib/armv7-ar/thumb/fpu
else
LGCC_PATH = /usr/lib/arm-none-eabi/4.8.2/armv7-ar/thumb/fpu
LC_PATH = /usr/lib/arm-none-eabi/lib/armv7-ar/thumb/fpu
endif

# Default target

all: rpi-boot-ocaml

# Serial connection convenience target `make connect`

SERIAL_DEV := /dev/tty.usbserial
connect:
	sudo cu -l $(SERIAL_DEV) -s 115200

# Deploy convenience target `make deploy`

DEPLOY_VOLUME := /Volumes/boot

ifeq ($(BUILD_OS),Darwin)

deploy: rpi-boot-ocaml
  # This avoids having to replug the micro SD adapter
	-diskutil unmount $(DEPLOY_VOLUME)
	sudo kextunload -b com.apple.driver.AppleSDXC
	sudo kextload -b com.apple.driver.AppleSDXC
	sleep 1
	cp $(BDIR)/rpi-boot-ocaml.img $(DEPLOY_VOLUME)/rpi-boot-ocaml.img
	diskutil unmount $(DEPLOY_VOLUME)

else

deploy: rpi-boot-ocaml
	echo "Deploy recipe for $(BUILD_OS) welcome."

endif
